#!/usr/bin/env node

var fs = require('fs');
var readline = require('readline');
var request = require('superagent');
var span = require('span');
var JSONStore = require('json-store');
var askFor = require('ask-for');
var http = require('http');
require('superagent-proxy')(request);

var proxy = process.env.http_proxy;

var cfg, db;

load(function(_cfg, _db) {
  cfg = _cfg;
  db = _db;
  proxy = cfg.proxy || proxy;
  var cmd = process.argv[2];
  if (cmd == 'sprint')    return sprint();
  if (cmd == 'config')    return config();
  if (cmd == 'ls')        return ls();
  if (cmd == 'start')     return start(process.argv[3]);
  if (cmd == 'stop')      return stop(process.argv[3], process.argv[4] == '--log');
  if (cmd == 'log')       return log(process.argv[3], process.argv.splice(4).join(''));
  if (cmd == 'running')   return running();
  if (cmd == 'resolve')   return resolve(process.argv[3]);
  if (cmd == 'reopen')    return reopen(process.argv[3]);
  if (cmd == 'close')     return close(process.argv[3]);
  if (cmd == 'needinfo')  return needInfo(process.argv[3]);
  if (cmd == 'search')    return search(process.argv.splice(3).join(' '));
  if (cmd == 'describe')  return describe(process.argv[3]);
  if (cmd == 'comments')  return comments(process.argv[3], process.argv[4] == '--reverse');
  if (cmd == 'subtasks')  return subtasks(process.argv[3]);
  if (cmd == 'comment')   return comment(process.argv[3], process.argv.slice(4));
  if (cmd == 'user')      return user(process.argv.slice(3));
  if (cmd == 'assign')    return assign(process.argv[3], process.argv.slice(4));
  if (cmd == 'status')    return setStatus(undefined, new Array (process.argv[3], process.argv[4]));
  if (cmd == 'statuses')  return statuses();
  usage();
});

function config() {
  configBasicAuth();
}

function statusesObject (func, issue, args){
  request
    .get (cfg.url + 'rest/api/2/' + (issue == undefined ? 'status': 'issue/' + issue + '/transitions'))
    .proxy (proxy)
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (res.body.transitions){
        return func (res.body.transitions, args);
      }
      return func (res.body, args);
    });
}

function statusesEnd (obj, args){
  for (var status in obj){
    console.log (obj[status].id + " " + obj[status].name);
  }
}

function statuses (){
  statusesObject (statusesEnd, undefined, undefined);
}

function currentStatus (issueKey, func){
   request
    .get (cfg.url + 'rest/api/2/issue/' + issueKey)
    .proxy (proxy)
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (res.body.errorMessages){
        console.log (res.body.errorMessages [0]);
        return;
      }
     func (res.body.fields.status.id + " " + res.body.fields.status.name);
    });
}

function setStatus (obj, args){
  if (obj == undefined){
    statusesObject (setStatus, args [0], args);
  }else{
    var newStatus = -1;
    for (var index in obj){
      if (obj[index].name == args [1] ||
          obj[index].id == args [1]){
        newStatus = obj[index].id;
      }
    }
    if (newStatus == -1){
      currentStatus (args [0], function (currStatus){
        console.log ("Current Status : " + currStatus);
        console.log ("Statuses available :");
        statusesEnd (obj, undefined);
      });
    }else{
      transition(args [0], newStatus);
    }
  }
}

function ls() {
  request
    .get (cfg.url + 'rest/api/2/search?jql=category="'+cfg.category+'"AND+status+in+(Open,"In+Progress",Reopened)+order+by+due+ASC,+priority+DESC')
    .proxy (proxy)
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      var issues = res.body.issues;
      var table = [];
      for (var i = 0 ; i< issues.length ; i++) {
        table.push([
          issues[i].key,
          '<'+issues[i].fields.reporter.name+'>',
          {data: formatPrio((issues[i].fields.priority ? issues[i].fields.priority.name : "unknown")), right: true},
          issues[i].fields.summary
        ]);
      }
      console.log(formatTable(table));
    })
  ;
}

function start(issue) {
  transition(issue, 1, function() {
    db.set(issue, Date.now());
  });
}

function stop(issue, logAlso) {
  transition(issue, 301, function() {
    // This can only happen when the Issue was started outside jilla
    if (!db.get(issue)) {
      if (logAlso) return console.error('Automatic logging only works for issues started from jilla');
      return;
    }
    // TODO: less exact time display
    var duration = Date.now() - db.get(issue);
    if (duration < 60000) duration = 60000;
    duration = span(duration);
    console.log('Time spent: '+duration);
    db.del(issue);
    if (logAlso) log(issue, duration);
  });
}

function log(issue, time) {
  time = Math.floor(span(time)/1000);
  if (time < 60) time = 60;
  request
    .post(cfg.url+'rest/api/2/issue/'+issue+'/worklog')
    .proxy (proxy)
    .send({timeSpentSeconds: time})
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
    })
  ;
}

function running() {
  var issues = db.get();
  if (JSON.stringify(issues) == '{}') return;
  var table = [];
  for (var issue in issues) {
    var duration = Date.now()-issues[issue];
    if (duration < 60000) duration = 60000;
    table.push([
      issue,
      span(duration)
    ]);
  }
  console.log(formatTable(table));
}

function resolve(issue) {
  getTransitionCode(issue, 'Resolved', curry(transition, issue));
}
function reopen(issue) {
  getTransitionCode(issue, 'In Progress', curry(transition, issue));
}
function close(issue) {
  getTransitionCode(issue, 'Closed', curry(transition, issue));
}
function needInfo(issue) {
  getTransitionCode(issue, 'Needs Info', curry(transition, issue));
}

function search(term) {
  var nbfound = 0;
  request
    .get(cfg.url+'rest/api/2/search?jql=category="'+cfg.category+'"AND+%28+summary+~+"'+term+'"+OR+description+~+"'+term+'"+OR+comment+~+"'+term+'"+%29+order+by+due+ASC,+priority+DESC')
    .proxy (proxy)
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return;
      var issues = res.body.issues;
      var table = [];
      for (var i=0; i<issues.length; i++) {
        table.push([
          issues[i].key,
          '<'+issues[i].fields.reporter.name+'>',
          {data: formatPrio((issues[i].fields.priority ? issues[i].fields.priority.name : "unknown")), right: true},
          issues[i].fields.summary
        ]);
      }
      if (table.length > 0){
        console.log(formatTable(table));
      }
    })
  ;
  request
    .get(cfg.url+'rest/api/2/search?jql=category="'+cfg.category+'"AND+issueKey+=+"'+term+'"+order+by+due+ASC,+priority+DESC')
    .proxy (proxy)
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return;
      var issues = res.body.issues;
      var table = [];
      for (var i=0; i<issues.length; i++) {
        table.push([
          issues[i].key,
          '<'+issues[i].fields.reporter.name+'>',
          {data: formatPrio((issues[i].fields.priority ? issues[i].fields.priority.name : "unknown")), right: true},
          issues[i].fields.summary
        ]);
      }
      if (table.length > 0){
        console.log(formatTable(table));
      }

    })
  ;
  request
    .get(cfg.url+'rest/api/2/search?jql=category="'+cfg.category+'"AND+project+=+"'+term+'"+order+by+due+ASC,+priority+DESC')
    .proxy (proxy)
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return;
      var issues = res.body.issues;
      var table = [];
      for (var i=0; i<issues.length; i++) {
        table.push([
          issues[i].key,
          '<'+issues[i].fields.reporter.name+'>',
          {data: formatPrio((issues[i].fields.priority ? issues[i].fields.priority.name : "unknown")), right: true},
          issues[i].fields.summary
        ]);
      }
      if (table.length > 0){
        console.log(formatTable(table));
      }
    })
  ;
  request
    .get(cfg.url+'rest/api/2/search?jql=category+=+"'+term+'"+order+by+due+ASC,+priority+DESC')
    .proxy (proxy)
    .set('Content-Type', 'application/json')
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return;
      var issues = res.body.issues;
      var table = [];
      for (var i=0; i<issues.length; i++) {
        table.push([
          issues[i].key,
          '<'+issues[i].fields.reporter.name+'>',
          {data: formatPrio((issues[i].fields.priority ? issues[i].fields.priority.name : "unknown")), right: true},
          issues[i].fields.summary
        ]);
      }
      if (table.length > 0){
        console.log(formatTable(table));
      }
    })
  ;
}

function describe(issue) {
  if (!issue) return usage();
  request
    .get(cfg.url+'rest/api/2/issue/'+issue)
    .proxy (proxy)
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      var fields = res.body.fields;
      var subtasks = fields.subtasks;
      var comments = fields.comment.comments;
      var formatted = [];
      formatted.push(
        ['Ticket:', res.body.key],
        ['Summary:', field(fields, 'summary')],
        ['Status:', field(fields, 'status.name')],
        ['Reporter:', formatUser(fields.reporter)],
        ['Assignee:', formatUser(fields.assignee)],
        ['Labels:', prettyPrint(fields.labels.join(', '), 66)],
        ['Subtasks:', subtasks.length],
        ['Comments:', comments.length],
        ['Description:']
      );
      var table = formatTable(formatted);
      table += '\n\n' + createIndent (process.stdout.columns - 1, '\u2581') + "\n" +
               indent(prettyPrint(field(fields, 'description'), process.stdout.columns - 10), 8) + '\n';
      table+="\u2503" + createIndent (process.stdout.columns - 1, '\u2581') + "\n";
      console.log(table);
      if (res.body.fields.parent && res.body.fields.parent.key){
        console.log (createIndent (process.stdout.columns - 1, '\u2581'));
        console.log ("PARENT");
        console.log (createIndent (process.stdout.columns - 1, '\u2581'));
        describe (res.body.fields.parent.key);
      }
    });
}

// List comments on an issue
// list can be reversed so that newest are at the top
function comments(issue, reverse) {
  if (!issue) return usage();
  request
    .get(cfg.url+'rest/api/2/issue/'+issue)
    .proxy (proxy)
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      var fields = res.body.fields;
      var comments = fields.comment.comments;
      if (reverse) {
        comments = comments.reverse();
      }
      if (comments.length) {
         console.log(formatComments(comments));
      }
      else {
        console.log('No Comments');
      }
    });
}

// List subtasks of an issue
function subtasks(issue) {
  if (!issue) return usage();
  request
    .get(cfg.url+'rest/api/2/issue/'+issue)
    .proxy (proxy)
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      var fields = res.body.fields;
      var subtasks = fields.subtasks;
      if (subtasks.length) {
         console.log(formatSubtasks(subtasks));
      }
      else {
        console.log('No Subtasks');
      }
    });
}

// Comment on an issue
function comment(issue, messageList) {
  if (!issue) return usage();
  if (!messageList.length) return askFor(['Comment'], function(answers) {
    commentOn(issue, answers['Comment']);
  });
  if (messageList.length > 1) return commentOn(issue, messageList.join(' '));
  return commentOn(issue, messageList[0]);
}

// Helper to make POST request to JIRA API with comment
function commentOn(issue, message) {
  request
    .post(cfg.url+'rest/api/2/issue/'+issue.toUpperCase()+'/comment/')
    .proxy(proxy)
    .auth(cfg.user, cfg.password)
    .send({ body: addEscapes(message) })
    .end(function(res) {
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      console.log('OK');
    });
}

function user(userFragment) {
  searchUsers(userFragment, function(users) {
    var results = [];
    users.forEach(function(u) {
      results.push([
        u.name, u.displayName, '<'+u.emailAddress+'>'
      ]);
    });
    console.log(formatTable(results));
  });
}

function assign(issue, userFragment) {
  var issueUpper = issue.toUpperCase();
  getSingleUser(userFragment, function(user) {
    if (!user) {
      return console.log(
        'No user found with fragment, "' + userFragment + '".'
      );
    }
    request
      .put(cfg.url+'rest/api/2/issue/'+issueUpper+'/assignee')
      .proxy (proxy)
      .auth(cfg.user, cfg.password)
      .send({ 'name': user.name })
      .end(function(res) {
        if (!res.ok) return console.log(
          res.body.errorMessages.join('\n')
        );
        console.log('Assigned '+issueUpper+' to user "'+formatUser(user)+'".');
      });
  });
}

function sprint (){
    request
      .get(cfg.url+'rest/greenhopper/1.0/rapidview')
      .proxy (proxy)
      .auth(cfg.user, cfg.password).end(function(res) {
        var id = -1;
        for (var i in res.body.views){
          if (res.body.views [i].name == cfg.sprintTeam){
            id = res.body.views [i].id;
          }
        }
        if (id == -1){
          return console.log ("Sprint team name incorrect, please config again");
        }
        request
      .get(cfg.url+'rest/greenhopper/1.0/sprintquery/' + id)
      .proxy (proxy)
      .auth(cfg.user, cfg.password).end(function(res) {
          var sprintid = -1;
          for (var i in res.body.sprints){
            if (res.body.sprints [i].state == "ACTIVE"){
              sprintid = res.body.sprints [i].id;
            }
          }
        if (sprintid == -1){
          return console.log ("No sprint is currently active");
        }
        request
      .get(cfg.url+'rest/greenhopper/1.0/rapid/charts/sprintreport?rapidViewId='+id+'&sprintId='+sprintid)
      .proxy (proxy)
      .auth(cfg.user, cfg.password).end(function(res) {
      var completedIssues = [];
      var incompletedIssues = [];
      var puntedIssues = [];
      for (var i in res.body.contents.completedIssues){
        completedIssues.push (res.body.contents.completedIssues [i].key);
      }
      for (var i in res.body.contents.incompletedIssues){
        incompletedIssues.push (res.body.contents.incompletedIssues [i].key);
      }
      for (var i in res.body.contents.puntedIssues){
        puntedIssues.push (res.body.contents.puntedIssues [i].key);
      }
      var formatted = [];
      formatted.push(
        ['Name               :', res.body.sprint.name],
        ['State              :', res.body.sprint.state],
        ['Start Date         :', res.body.sprint.startDate],
        ['End Date           :', res.body.sprint.endDate],
        ['Complete Date      :', res.body.sprint.completeDate]	
      );
      var table = formatTable(formatted);
      table += "\n\nCompleted Issues   : " + (completedIssues.length == 0 ? "0" : completedIssues) + "\n";
      table += "Incompleted Issues : " + (incompletedIssues.length == 0 ? "0" : incompletedIssues) + "\n";
      table += "Punted Issues      : " + (puntedIssues.length == 0 ? "0" : puntedIssues) + "\n";
      console.log (table);
      });
      });
      });
}

function usage() {
  console.log('usage: jilla <command> [<args>]');
  console.log('');
  console.log('Commands:');
  console.log('   config                      Update jilla configuration');
  console.log('   ls                          List open issues');
  console.log('   statuses                    Different statuses');
  console.log('   sprint                      All sprint issues (JIRA Agile only)');
  console.log('   start     <id>              Start working on an issue');
  console.log('   stop      <id> (--log)      Stop working on an issue (and log time)');
  console.log('   log       <id> <time>       Log work');
  console.log('   running                     List issues in progress');
  console.log('   resolve   <id>              Resolve issue');
  console.log('   reopen    <id>              Reopen issue');
  console.log('   close     <id>              Close issue');
  console.log('   needinfo  <id>              Set issue status to Needs Info');
  console.log('   status    <id> (status)     Changes issue status to "status" (no status to get a list of options)');
  console.log('   search    <term>            Find issues');
  console.log('   describe  <id>              Display issue synopsis');
  console.log('   comments  <id> (--reverse)  Display comments on an issue');
  console.log('   subtasks  <id>              List an issue\'s subtasks');
  console.log('   comment   <id> "<message>"  Comment on an issue');
  console.log('   user      <term>            Search for a user');
  console.log('   assign    <id> <user>       Assign issue to a user');
  console.log('When using gira and when inside a git repository, id is guessed');
}

function transition(issue, id, cb) {
  request
    .post(cfg.url+'rest/api/2/issue/'+issue+'/transitions')
    .proxy (proxy)
    .send({transition: {id: id}})
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      if (!res.ok) return console.log(res.statusCode + ' ' +
        res.body.errorMessages.join('\n'));
      if (cb) cb();
    })
  ;
}

// Get a transition ID, given an issue and the transition's name.
function getTransitionCode(issue, transitionName, success) {
  request
    .get(cfg.url+'rest/api/2/issue/'+issue+'/transitions')
    .proxy (proxy)
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      var transitionID;
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      res.body.transitions.some(function(transition) {
        if (transition.name === transitionName) {
          transitionID = transition.id;
          return true;
        }
      });
      if (!transitionID) return console.log('Invalid transition for this issue.');
      success(transitionID);
    });
}

// Get all users matching a given fragment of text.
function searchUsers(userFragment, callback) {
  request
    .get(cfg.url+'rest/api/2/user/search/?username='+userFragment)
    .proxy (proxy)
    .auth(cfg.user, cfg.password)
    .end(function(res) {
      var users;
      if (!res.ok) return console.log(
        res.body.errorMessages.join('\n')
      );
      users = res.body;
      callback(users);
    });
}

// Get a single user matching a given search fragment.
// If multiple users match the fragment then a menu is presented
// to choose which user is the correct one.
function getSingleUser(userFragment, callback) {
  var request = 'Found multiple users, choose one by typing a number and hitting return';
  searchUsers(userFragment, function(users) {
    if (users.length <= 1) {
      callback(users[0]);
    }
    else if (users.length > 1) {
      users.forEach(function(u, i) {
        console.log((i + 1) + '  ' + formatUser(u));
      });
      askFor([request], function(results) {
        var userIndex = parseInt(results[request], 10) - 1;
        if (!(userIndex in users)) {
          return console.log('Invalid user selection.');
        }
        callback(users[userIndex]);
      });
    }
  });
}

function curry(callback) {
  var curryArgs = Array.prototype.slice.call(arguments, 1);
  return function() {
    var callbackArgs = curryArgs.concat(Array.prototype.slice.call(arguments, 0));
    callback.apply(null, callbackArgs);
  };
}

function formatTable(cols, options) {
  var rowLengths = [];
  var output = '';
  var i, j;
  options = options || {};

  for (i=0; i<cols.length; i++) {
    for (j=0; j<cols[i].length; j++) {
      if (!rowLengths[j]) rowLengths[j] = 0;
      if (typeof cols[i][j] != 'object') cols[i][j] = {data:cols[i][j]};
      if (cols[i][j].data.length > rowLengths[j]) {
        rowLengths[j] = cols[i][j].data.length;
      }
    }
  }

  for (i=0; i<cols.length; i++) {
    var col = '';
    for (j=0; j<cols[i].length; j++) {
      if (j == cols[i].length-1) {
        col += cols[i][j].data;
        continue;
      }
      col += pad(
        cols[i][j].data,
        rowLengths[j],
        {right: cols[i][j].right}
      ) + ' ';
    }
    output += options.wrapText ? prettyPrint(col, process.stdout.columns) : truncate(col, process.stdout.columns - 1);
    if (i < cols.length-1) output += '\n';
  }

  return output;

  function pad(str, len, cfg) {
    cfg = cfg || {};
    cfg.character = cfg.character || ' ';
    if (cfg.right) {
      while(str.length < len) str = cfg.character + str;
    } else {
      while(str.length < len) str += cfg.character;
    }
    return str;
  }

  function truncate(str, len) {
    if (str.length <= len) return str;
    while (str.length > len-3) str = str.slice(0, -1);
    str = pad(str, len, {character:'.'});
    return str;
  }
}

function formatPrio(name) {
  if (name == 'Minor')    return '!';
  if (name == 'Major')    return '!!';
  if (name == 'Critical') return '!!!';
  if (name == 'Blocker')  return '!!!!';
  return name;
}

function homeDir() {
  var homeEnvVar = (process.platform == 'win32') ? 'USERPROFILE' : 'HOME';
  return process.env[homeEnvVar];
}

function getJillaDir() {
  return homeDir()+'/.jilla/';
}

function getCfgPath() {
  return getJillaDir()+'cfg.json';
}

function getDbPath() {
  return getJillaDir()+'db.json';
}

function load(cb) {
  var cfgPath = getCfgPath(),
      dbPath = getDbPath();
  if (fs.existsSync(cfgPath) && fs.existsSync(dbPath)) {
    cb(require(cfgPath), JSONStore(dbPath));
  } else {
    configBasicAuth(cb);
  }
}

function configBasicAuth(cb) {
  var cfgPath = getCfgPath(),
      dbPath = getDbPath(),
      jillaDir = getJillaDir();
  if (!fs.existsSync(jillaDir)) fs.mkdirSync(jillaDir);
  askFor(['Internet Proxy (http://user:pwd@host:port)', 'Jira Url', 'Username', 'Password', 'Category', 'Sprint Team Name'], function(answers) {
    console.log('Good to go!');
    cfg = {
      proxy   : answers['Internet Proxy (http://user:pwd@host:port)'],
      url     : answers['Jira Url'],
      user    : answers['Username'],
      password: answers['Password'],
      category: answers['Category'],
      sprintTeam:answers['Sprint Team Name']
    };
    if (cfg.url[cfg.url.length-1] != '/') cfg.url += '/';
    // TODO: Store password securely
    fs.writeFileSync(cfgPath, JSON.stringify(cfg));
    if (typeof cb === 'function') cb(cfg, JSONStore(dbPath));
  });
}

// Get a field nested deep inside an object
// Returns an empty string if the field doesn't exist or is null/undefined
function field(obj, pathString) {
  if (!obj || typeof pathString !== 'string') return '';
  function fn(obj, path) {
    var prop = path.shift();
    if (!(prop in obj) || obj[prop] == null) return '';
    if (path.length) {
      return fn(obj[prop], path);
    }
    return String(obj[prop]);
  }
  return fn(obj, pathString.split('.'));
}

// Limit the widths of lines in a string
// Assumes that lines are separated with a single \n newline character
function prettyPrint(string, len) {
  var lines = string.split('\n');
  len = (typeof len === 'number') ? len : process.stdout.columns;
  var chars;
  var newLine;
  var j = 0;
  for (var i = 0; i < lines.length; i++) {
    if (!lines [i].match (/(\s*)#/)){
    j = 0;
    }
    lines [i] = lines[i].replace (/(\s*)h1\.\s*([^\n]*)/, "$1\033[4;7;31;40m$2\033[0;24;27;37m");
    lines [i] = lines[i].replace (/(\s*)h2\.\s*([^\n]*)/, "$1 \033[4;7;40m$2\033[0;24;27;37m");
    lines [i] = lines[i].replace (/(\s*)h3\.\s*([^\n]*)/, "$1  \033[1;4m$2\033[0;21;24m");
    lines [i] = lines[i].replace (/(\s*)h4\.\s*([^\n]*)/, "$1   \033[4m$2\033[0;24m");
    lines [i] = lines[i].replace (/(\s*)h5\.\s*([^\n]*)/, function(v) { return "   \033[0m" + v.toUpperCase().substring (3); });
    lines [i] = lines[i].replace (/(\s*)#\s+([^#\n]*)/, function (v) {return "[" + (++j) + "]" + v.substring (1);});
    lines [i] = lines[i].replace (/\*([^*]+)\*/, "\033[1m$1\033[0m");
    lines [i] = lines[i].replace (/^(\s*)--/, "      \u25A0");
    lines [i] = lines[i].replace (/^(\s*)-/, "\u25A0");

    if (lines[i].length > len) {
      chars = lines[i].split('');
      lines[i] = lines[i].slice(0, len - 1);
      lines.splice(i + 1, 0, chars.slice(len - 1).join(''));
    }
  }
  return lines.join('\n');
}

function formatUser(user, hideEmail) {
  var formatted = field(user, 'displayName');
  if (!hideEmail) {
    formatted += ' <'+field(user, 'emailAddress')+'>';
  }
  return formatted;
}

function formatComments(comments) {
  var formatted = [];
  comments.forEach(function(comment) {
    formatted.push(formatComment(comment));
  });
  return formatted.join('\n\n');
}

function formatComment(comment) {
  var body = field(comment, 'body');
  var user = formatUser(comment.author, true);
  var indentAmount = 4;
  var formattedComment = indent(prettyPrint(body, process.stdout.columns - indentAmount), indentAmount);
  return 'Author: ' + user + '\n'
       + 'Date:   ' + new Date(field(comment, 'updated')).toLocaleString() + '\n'
       + '\n'
       + formattedComment
       + '\n';
}

function indent(text, by) {
  var spaces = createIndent(by);
  var spaces1 = createIndent(by - 2)
  var spaces2 = createIndent(by - 3)
  var lines = text.split('\n');

  for (var i = 0; i < lines.length; i++) {
    if (lines [i].match (/^\[[0-9]+\]/)){
      lines[i] = spaces2 + lines[i];
    }else if (lines [i].substring (0, 1) === "\u25A0"){
      lines[i] = spaces1 + lines[i];
    }else if (!lines [i].match (/^\s*\033.*/)){
      lines[i] = spaces + lines[i];
    }
    lines[i] = "\u2503  " + lines[i];
  }
  return lines.join('\n');
}

function createIndent(len, chr) {
  var indent = '';
  if (chr == undefined){
    chr = ' ';
  }
  while (len--) {
    indent += chr;
  }
  return indent;
}

function formatSubtasks(subtasks) {
  var formatted = [];
  subtasks.forEach(function(task) {
    var status = field(task, 'fields.status.name');
    formatted.push([
      field(task, 'key'),
      status,
      field(task, 'fields.summary')
    ]);
  });
  return formatTable(formatted);
}

function addEscapes(string) {
  return string.replace(/\\/g, '\\\\');
}

